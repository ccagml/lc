{"data":[{"name":"2023-02-23 16:55:07","id":1677142507128,"body":"dfs超时\nclass Solution\n{\npublic:\n    int set_bit_1(int x, int index)\n    {\n        x |= (1 << index);\n        return x;\n    }\n    int set_bit_0(int x, int index)\n    {\n        x &= ~(1 << index);\n        return x;\n    }\n\n    bool is_bit_1(int x, int index)\n    {\n        return ((1 << index) & (x));\n    }\n\n    vector<unordered_set<int>> vus;\n    unordered_set<int> has_temp;\n    int max_v;\n\n    bool dfs(vector<int> &temp)\n    {\n        if (temp.size() == max_v + 1)\n        {\n            if (temp.size() == 1 || vus[temp[0]].count(temp[temp.size() - 1]) > 0)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        int last = temp[temp.size() - 1];\n        for (auto &can_next : vus[last])\n        {\n            if (has_temp.count(can_next) < 1)\n            {\n                temp.push_back(can_next);\n                has_temp.insert(can_next);\n                if (dfs(temp))\n                {\n                    return true;\n                }\n                else\n                {\n                    temp.pop_back();\n                    has_temp.erase(can_next);\n                }\n            }\n        }\n        return false;\n    }\n\n    vector<int> circularPermutation(int n, int start)\n    {\n        int end = 2;\n        for (int i = 1; i < n; i++)\n        {\n            end *= 2;\n        }\n        max_v = end - 1;\n        vector<int> temp;\n        temp.push_back(start);\n        has_temp.insert(start);\n        // vector<unordered_set<int>> vustt(max_v);\n        // vus = vustt;\n        vus.resize(end);\n        for (int i = 0; i < end; i++)\n        {\n            // 数字 i 差一位的值\n            for (int j = 0; j < 17; j++)\n            {\n                if (is_bit_1(i, j))\n                {\n                    int next = set_bit_0(i, j);\n                    if (next <= max_v)\n                    {\n                        vus[i].insert(next);\n                    }\n                }\n                else\n                {\n                    int next = set_bit_1(i, j);\n                    if (next <= max_v)\n                    {\n                        vus[i].insert(next);\n                    }\n                }\n            }\n        }\n        dfs(temp);\n        return temp;\n    }\n};"}]}