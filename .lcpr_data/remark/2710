{"data":[{"name":"2023-02-20 09:53:40","id":1676858020312,"body":"超时\n\nclass Solution\n{\npublic:\n    int minOperations(int n)\n    {\n        vector<int> vi;\n        int start = 1;\n        vi.push_back(1);\n        unordered_map<int, int> uii;\n        uii[1] = 1;\n        for (int i = 0; i < 18; i++)\n        {\n            start *= 2;\n            vi.push_back(start);\n            uii[start] = 1;\n        }\n        unordered_map<int, int> temp;\n        temp[n] = 0;\n        if (uii.count(n) > 0)\n        {\n            return 1;\n        }\n        while (true)\n        {\n            unordered_map<int, int> temp1;\n            for (pair<int, int> pp : temp)\n            {\n\n                for (int i = 0; i < vi.size(); i++)\n                {\n                    int add = pp.first + vi[i];\n                    int cost = pp.first - vi[i];\n                    if (uii.count(add) > 0)\n                    {\n                        return pp.second + 2;\n                    }\n                    if (uii.count(cost) > 0)\n                    {\n                        return pp.second + 2;\n                    }\n                    temp1[add] = pp.second + 1;\n                    temp1[cost] = pp.second + 1;\n                }\n            }\n            temp = temp1;\n        }\n        return 0;\n    }\n};"},{"name":"2023-02-22 15:34:37","id":1677051277729,"body":"二进制 一堆边缘条件\nclass Solution\n{\npublic:\n    bool is_bit_1(int x, int index)\n    {\n        return ((1 << index) & (x));\n    }\n\n    int minOperations(int n)\n    {\n\n        int result = 0;\n        // 二进制\n        int cnt = 0;\n        vector<int> temp;\n        for (int i = 31; i >= 0; i--)\n        {\n\n            if (is_bit_1(n, i))\n            {\n                cnt++;\n            }\n            else\n            {\n                // 0 后面是1\n                int next = i - 1;\n                int nnext = i - 2;\n                if (nnext >= 0 && ((cnt >= 2 && is_bit_1(n, next)) || (cnt == 1 && is_bit_1(n, next) && is_bit_1(n, nnext))))\n                {\n                    result++;\n                    cnt++;\n                }\n                else\n                {\n                    result += min(2, cnt);\n                    cnt = 0;\n                }\n            }\n        }\n        result += min(2, cnt);\n\n        return result;\n    }\n};"}]}